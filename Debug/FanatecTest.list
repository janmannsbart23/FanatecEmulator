
FanatecTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bcc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08002c88  08002c88  00012c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc8  08002dc8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002dc8  08002dc8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002dc8  08002dc8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc8  08002dc8  00012dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000030  08002e00  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08002e00  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000701c  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000185b  00000000  00000000  000270b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  00028918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005c1  00000000  00000000  000290c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000146d7  00000000  00000000  00029681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008af1  00000000  00000000  0003dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00081345  00000000  00000000  00046849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000019fc  00000000  00000000  000c7b90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000030 	.word	0x20000030
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002c70 	.word	0x08002c70

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000034 	.word	0x20000034
 8000100:	08002c70 	.word	0x08002c70

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <crc8>:
		40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139, 87, 9, 235,
		181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22, 233, 183,
		85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168, 116, 42,
		200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53 };

uint8_t crc8(const uint8_t *buf, uint8_t length) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	000a      	movs	r2, r1
 8000226:	1cfb      	adds	r3, r7, #3
 8000228:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0xff;
 800022a:	230f      	movs	r3, #15
 800022c:	18fb      	adds	r3, r7, r3
 800022e:	22ff      	movs	r2, #255	; 0xff
 8000230:	701a      	strb	r2, [r3, #0]
	while (length) {
 8000232:	e013      	b.n	800025c <crc8+0x40>
		//crc = pgm_read_byte_near(_crc8_table + (*buf ^ crc));
		crc = _crc8_table[(*buf ^ crc)];
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	781a      	ldrb	r2, [r3, #0]
 8000238:	200f      	movs	r0, #15
 800023a:	183b      	adds	r3, r7, r0
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	4053      	eors	r3, r2
 8000240:	b2db      	uxtb	r3, r3
 8000242:	0019      	movs	r1, r3
 8000244:	183b      	adds	r3, r7, r0
 8000246:	4a0b      	ldr	r2, [pc, #44]	; (8000274 <crc8+0x58>)
 8000248:	5c52      	ldrb	r2, [r2, r1]
 800024a:	701a      	strb	r2, [r3, #0]
		buf++;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	3301      	adds	r3, #1
 8000250:	607b      	str	r3, [r7, #4]
		length--;
 8000252:	1cfb      	adds	r3, r7, #3
 8000254:	781a      	ldrb	r2, [r3, #0]
 8000256:	1cfb      	adds	r3, r7, #3
 8000258:	3a01      	subs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]
	while (length) {
 800025c:	1cfb      	adds	r3, r7, #3
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d1e7      	bne.n	8000234 <crc8+0x18>
	}
	return crc;
 8000264:	230f      	movs	r3, #15
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	781b      	ldrb	r3, [r3, #0]
}
 800026a:	0018      	movs	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	b004      	add	sp, #16
 8000270:	bd80      	pop	{r7, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	08002c88 	.word	0x08002c88

08000278 <calcOutgoingCrc>:

void calcOutgoingCrc() {
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	aTxBuffer[BUFFER_SIZE - 1] = crc8(aTxBuffer, BUFFER_SIZE - 1); // calculates crc8 for outgoing packet
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <calcOutgoingCrc+0x20>)
 800027e:	2120      	movs	r1, #32
 8000280:	0018      	movs	r0, r3
 8000282:	f7ff ffcb 	bl	800021c <crc8>
 8000286:	0003      	movs	r3, r0
 8000288:	0019      	movs	r1, r3
 800028a:	4b03      	ldr	r3, [pc, #12]	; (8000298 <calcOutgoingCrc+0x20>)
 800028c:	2220      	movs	r2, #32
 800028e:	5499      	strb	r1, [r3, r2]
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	20000000 	.word	0x20000000

0800029c <readAllButtons>:
};
__IO uint32_t wTransferState = TRANSFER_WAIT;

uint8_t buttonStates[14] = { 0 };

void readAllButtons() {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

	buttonStates[0] = !HAL_GPIO_ReadPin(IN_G1_GPIO_Port, IN_G1_Pin);
 80002a0:	4b5f      	ldr	r3, [pc, #380]	; (8000420 <readAllButtons+0x184>)
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	0018      	movs	r0, r3
 80002a6:	f001 f961 	bl	800156c <HAL_GPIO_ReadPin>
 80002aa:	0003      	movs	r3, r0
 80002ac:	425a      	negs	r2, r3
 80002ae:	4153      	adcs	r3, r2
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	001a      	movs	r2, r3
 80002b4:	4b5b      	ldr	r3, [pc, #364]	; (8000424 <readAllButtons+0x188>)
 80002b6:	701a      	strb	r2, [r3, #0]
	buttonStates[1] = !HAL_GPIO_ReadPin(IN_G2_GPIO_Port, IN_G2_Pin);
 80002b8:	4b59      	ldr	r3, [pc, #356]	; (8000420 <readAllButtons+0x184>)
 80002ba:	2180      	movs	r1, #128	; 0x80
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 f955 	bl	800156c <HAL_GPIO_ReadPin>
 80002c2:	0003      	movs	r3, r0
 80002c4:	425a      	negs	r2, r3
 80002c6:	4153      	adcs	r3, r2
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	001a      	movs	r2, r3
 80002cc:	4b55      	ldr	r3, [pc, #340]	; (8000424 <readAllButtons+0x188>)
 80002ce:	705a      	strb	r2, [r3, #1]
	buttonStates[2] = !HAL_GPIO_ReadPin(IN_G3_GPIO_Port, IN_G3_Pin);
 80002d0:	2380      	movs	r3, #128	; 0x80
 80002d2:	011a      	lsls	r2, r3, #4
 80002d4:	23a0      	movs	r3, #160	; 0xa0
 80002d6:	05db      	lsls	r3, r3, #23
 80002d8:	0011      	movs	r1, r2
 80002da:	0018      	movs	r0, r3
 80002dc:	f001 f946 	bl	800156c <HAL_GPIO_ReadPin>
 80002e0:	0003      	movs	r3, r0
 80002e2:	425a      	negs	r2, r3
 80002e4:	4153      	adcs	r3, r2
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	001a      	movs	r2, r3
 80002ea:	4b4e      	ldr	r3, [pc, #312]	; (8000424 <readAllButtons+0x188>)
 80002ec:	709a      	strb	r2, [r3, #2]
	buttonStates[3] = !HAL_GPIO_ReadPin(IN_G4_GPIO_Port, IN_G4_Pin);
 80002ee:	2380      	movs	r3, #128	; 0x80
 80002f0:	00da      	lsls	r2, r3, #3
 80002f2:	23a0      	movs	r3, #160	; 0xa0
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	0011      	movs	r1, r2
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 f937 	bl	800156c <HAL_GPIO_ReadPin>
 80002fe:	0003      	movs	r3, r0
 8000300:	425a      	negs	r2, r3
 8000302:	4153      	adcs	r3, r2
 8000304:	b2db      	uxtb	r3, r3
 8000306:	001a      	movs	r2, r3
 8000308:	4b46      	ldr	r3, [pc, #280]	; (8000424 <readAllButtons+0x188>)
 800030a:	70da      	strb	r2, [r3, #3]
	buttonStates[4] = !HAL_GPIO_ReadPin(IN_G5_GPIO_Port, IN_G5_Pin);
 800030c:	2380      	movs	r3, #128	; 0x80
 800030e:	009a      	lsls	r2, r3, #2
 8000310:	23a0      	movs	r3, #160	; 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	0011      	movs	r1, r2
 8000316:	0018      	movs	r0, r3
 8000318:	f001 f928 	bl	800156c <HAL_GPIO_ReadPin>
 800031c:	0003      	movs	r3, r0
 800031e:	425a      	negs	r2, r3
 8000320:	4153      	adcs	r3, r2
 8000322:	b2db      	uxtb	r3, r3
 8000324:	001a      	movs	r2, r3
 8000326:	4b3f      	ldr	r3, [pc, #252]	; (8000424 <readAllButtons+0x188>)
 8000328:	711a      	strb	r2, [r3, #4]
	buttonStates[5] = !HAL_GPIO_ReadPin(IN_G6_GPIO_Port, IN_G6_Pin);
 800032a:	4b3d      	ldr	r3, [pc, #244]	; (8000420 <readAllButtons+0x184>)
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 f91c 	bl	800156c <HAL_GPIO_ReadPin>
 8000334:	0003      	movs	r3, r0
 8000336:	425a      	negs	r2, r3
 8000338:	4153      	adcs	r3, r2
 800033a:	b2db      	uxtb	r3, r3
 800033c:	001a      	movs	r2, r3
 800033e:	4b39      	ldr	r3, [pc, #228]	; (8000424 <readAllButtons+0x188>)
 8000340:	715a      	strb	r2, [r3, #5]
	buttonStates[6] = !HAL_GPIO_ReadPin(IN_G7_GPIO_Port, IN_G7_Pin);
 8000342:	4b37      	ldr	r3, [pc, #220]	; (8000420 <readAllButtons+0x184>)
 8000344:	2104      	movs	r1, #4
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f910 	bl	800156c <HAL_GPIO_ReadPin>
 800034c:	0003      	movs	r3, r0
 800034e:	425a      	negs	r2, r3
 8000350:	4153      	adcs	r3, r2
 8000352:	b2db      	uxtb	r3, r3
 8000354:	001a      	movs	r2, r3
 8000356:	4b33      	ldr	r3, [pc, #204]	; (8000424 <readAllButtons+0x188>)
 8000358:	719a      	strb	r2, [r3, #6]
	buttonStates[7] = !HAL_GPIO_ReadPin(IN_G8_GPIO_Port, IN_G8_Pin);
 800035a:	2380      	movs	r3, #128	; 0x80
 800035c:	005b      	lsls	r3, r3, #1
 800035e:	4a30      	ldr	r2, [pc, #192]	; (8000420 <readAllButtons+0x184>)
 8000360:	0019      	movs	r1, r3
 8000362:	0010      	movs	r0, r2
 8000364:	f001 f902 	bl	800156c <HAL_GPIO_ReadPin>
 8000368:	0003      	movs	r3, r0
 800036a:	425a      	negs	r2, r3
 800036c:	4153      	adcs	r3, r2
 800036e:	b2db      	uxtb	r3, r3
 8000370:	001a      	movs	r2, r3
 8000372:	4b2c      	ldr	r3, [pc, #176]	; (8000424 <readAllButtons+0x188>)
 8000374:	71da      	strb	r2, [r3, #7]
	buttonStates[8] = !HAL_GPIO_ReadPin(IN_G9_GPIO_Port, IN_G9_Pin);
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	005a      	lsls	r2, r3, #1
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	0011      	movs	r1, r2
 8000380:	0018      	movs	r0, r3
 8000382:	f001 f8f3 	bl	800156c <HAL_GPIO_ReadPin>
 8000386:	0003      	movs	r3, r0
 8000388:	425a      	negs	r2, r3
 800038a:	4153      	adcs	r3, r2
 800038c:	b2db      	uxtb	r3, r3
 800038e:	001a      	movs	r2, r3
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <readAllButtons+0x188>)
 8000392:	721a      	strb	r2, [r3, #8]
	buttonStates[9] = !HAL_GPIO_ReadPin(IN_G10_GPIO_Port, IN_G10_Pin);
 8000394:	2380      	movs	r3, #128	; 0x80
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	4a21      	ldr	r2, [pc, #132]	; (8000420 <readAllButtons+0x184>)
 800039a:	0019      	movs	r1, r3
 800039c:	0010      	movs	r0, r2
 800039e:	f001 f8e5 	bl	800156c <HAL_GPIO_ReadPin>
 80003a2:	0003      	movs	r3, r0
 80003a4:	425a      	negs	r2, r3
 80003a6:	4153      	adcs	r3, r2
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	001a      	movs	r2, r3
 80003ac:	4b1d      	ldr	r3, [pc, #116]	; (8000424 <readAllButtons+0x188>)
 80003ae:	725a      	strb	r2, [r3, #9]
	buttonStates[10] = !HAL_GPIO_ReadPin(IN_G11_GPIO_Port, IN_G11_Pin);
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <readAllButtons+0x184>)
 80003b2:	2120      	movs	r1, #32
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f8d9 	bl	800156c <HAL_GPIO_ReadPin>
 80003ba:	0003      	movs	r3, r0
 80003bc:	425a      	negs	r2, r3
 80003be:	4153      	adcs	r3, r2
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	001a      	movs	r2, r3
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <readAllButtons+0x188>)
 80003c6:	729a      	strb	r2, [r3, #10]
	buttonStates[11] = !HAL_GPIO_ReadPin(IN_G12_GPIO_Port, IN_G12_Pin);
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <readAllButtons+0x184>)
 80003ca:	2110      	movs	r1, #16
 80003cc:	0018      	movs	r0, r3
 80003ce:	f001 f8cd 	bl	800156c <HAL_GPIO_ReadPin>
 80003d2:	0003      	movs	r3, r0
 80003d4:	425a      	negs	r2, r3
 80003d6:	4153      	adcs	r3, r2
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	001a      	movs	r2, r3
 80003dc:	4b11      	ldr	r3, [pc, #68]	; (8000424 <readAllButtons+0x188>)
 80003de:	72da      	strb	r2, [r3, #11]
	buttonStates[12] = !HAL_GPIO_ReadPin(IN_SHIFTER_LEFT_GPIO_Port,
 80003e0:	23a0      	movs	r3, #160	; 0xa0
 80003e2:	05db      	lsls	r3, r3, #23
 80003e4:	2120      	movs	r1, #32
 80003e6:	0018      	movs	r0, r3
 80003e8:	f001 f8c0 	bl	800156c <HAL_GPIO_ReadPin>
 80003ec:	0003      	movs	r3, r0
 80003ee:	425a      	negs	r2, r3
 80003f0:	4153      	adcs	r3, r2
 80003f2:	b2db      	uxtb	r3, r3
 80003f4:	001a      	movs	r2, r3
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <readAllButtons+0x188>)
 80003f8:	731a      	strb	r2, [r3, #12]
	IN_SHIFTER_LEFT_Pin);
	buttonStates[13] = !HAL_GPIO_ReadPin(IN_SHIFTER_RIGHT_GPIO_Port,
 80003fa:	2380      	movs	r3, #128	; 0x80
 80003fc:	015a      	lsls	r2, r3, #5
 80003fe:	23a0      	movs	r3, #160	; 0xa0
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	0011      	movs	r1, r2
 8000404:	0018      	movs	r0, r3
 8000406:	f001 f8b1 	bl	800156c <HAL_GPIO_ReadPin>
 800040a:	0003      	movs	r3, r0
 800040c:	425a      	negs	r2, r3
 800040e:	4153      	adcs	r3, r2
 8000410:	b2db      	uxtb	r3, r3
 8000412:	001a      	movs	r2, r3
 8000414:	4b03      	ldr	r3, [pc, #12]	; (8000424 <readAllButtons+0x188>)
 8000416:	735a      	strb	r2, [r3, #13]
	IN_SHIFTER_RIGHT_Pin);
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	50000400 	.word	0x50000400
 8000424:	20000198 	.word	0x20000198

08000428 <assembleButtons>:

void assembleButtons() {
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
	uint8_t buttonByte0 = (buttonStates[9] << 4)/*a*/
 800042e:	4b32      	ldr	r3, [pc, #200]	; (80004f8 <assembleButtons+0xd0>)
 8000430:	7a5b      	ldrb	r3, [r3, #9]
 8000432:	011b      	lsls	r3, r3, #4
	| (buttonStates[10] << 5)/*RSB*/
 8000434:	b25a      	sxtb	r2, r3
 8000436:	4b30      	ldr	r3, [pc, #192]	; (80004f8 <assembleButtons+0xd0>)
 8000438:	7a9b      	ldrb	r3, [r3, #10]
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	b25b      	sxtb	r3, r3
 800043e:	4313      	orrs	r3, r2
 8000440:	b25a      	sxtb	r2, r3
	| (buttonStates[8] << 6)/*rt*/
 8000442:	4b2d      	ldr	r3, [pc, #180]	; (80004f8 <assembleButtons+0xd0>)
 8000444:	7a1b      	ldrb	r3, [r3, #8]
 8000446:	019b      	lsls	r3, r3, #6
 8000448:	b25b      	sxtb	r3, r3
 800044a:	4313      	orrs	r3, r2
 800044c:	b25a      	sxtb	r2, r3
	| (buttonStates[11] << 7)/*rb*/;
 800044e:	4b2a      	ldr	r3, [pc, #168]	; (80004f8 <assembleButtons+0xd0>)
 8000450:	7adb      	ldrb	r3, [r3, #11]
 8000452:	01db      	lsls	r3, r3, #7
 8000454:	b25b      	sxtb	r3, r3
 8000456:	4313      	orrs	r3, r2
 8000458:	b25a      	sxtb	r2, r3
	uint8_t buttonByte0 = (buttonStates[9] << 4)/*a*/
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	701a      	strb	r2, [r3, #0]

	uint8_t buttonByte1 = (buttonStates[12] << 3)/*shift l*/
 800045e:	4b26      	ldr	r3, [pc, #152]	; (80004f8 <assembleButtons+0xd0>)
 8000460:	7b1b      	ldrb	r3, [r3, #12]
 8000462:	00db      	lsls	r3, r3, #3
	| (buttonStates[13] << 0)/*shift r*/
 8000464:	b25a      	sxtb	r2, r3
 8000466:	4b24      	ldr	r3, [pc, #144]	; (80004f8 <assembleButtons+0xd0>)
 8000468:	7b5b      	ldrb	r3, [r3, #13]
 800046a:	b25b      	sxtb	r3, r3
 800046c:	4313      	orrs	r3, r2
 800046e:	b25a      	sxtb	r2, r3
	| (buttonStates[3] << 1)/*lsb*/
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <assembleButtons+0xd0>)
 8000472:	78db      	ldrb	r3, [r3, #3]
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	b25b      	sxtb	r3, r3
 8000478:	4313      	orrs	r3, r2
 800047a:	b25a      	sxtb	r2, r3
	| (buttonStates[5] << 2)/*option 3 stripes*/
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <assembleButtons+0xd0>)
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	b25b      	sxtb	r3, r3
 8000484:	4313      	orrs	r3, r2
 8000486:	b25a      	sxtb	r2, r3
	| (buttonStates[1] << 4)/*lt*/
 8000488:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <assembleButtons+0xd0>)
 800048a:	785b      	ldrb	r3, [r3, #1]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	b25b      	sxtb	r3, r3
 8000490:	4313      	orrs	r3, r2
 8000492:	b25a      	sxtb	r2, r3
	| (buttonStates[2] << 5)/*lb*/
 8000494:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <assembleButtons+0xd0>)
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	015b      	lsls	r3, r3, #5
 800049a:	b25b      	sxtb	r3, r3
 800049c:	4313      	orrs	r3, r2
 800049e:	b25a      	sxtb	r2, r3
	| (buttonStates[0] << 6)/*2 square*/
 80004a0:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <assembleButtons+0xd0>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	019b      	lsls	r3, r3, #6
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b25a      	sxtb	r2, r3
	| (buttonStates[7] << 7)/*y*/;
 80004ac:	4b12      	ldr	r3, [pc, #72]	; (80004f8 <assembleButtons+0xd0>)
 80004ae:	79db      	ldrb	r3, [r3, #7]
 80004b0:	01db      	lsls	r3, r3, #7
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	4313      	orrs	r3, r2
 80004b6:	b25a      	sxtb	r2, r3
	uint8_t buttonByte1 = (buttonStates[12] << 3)/*shift l*/
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	701a      	strb	r2, [r3, #0]

	uint8_t buttonByte2 = (buttonStates[6] << 2)/*B*/
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <assembleButtons+0xd0>)
 80004be:	799b      	ldrb	r3, [r3, #6]
 80004c0:	009b      	lsls	r3, r3, #2
	| (buttonStates[4] << 3)/*x*/;
 80004c2:	b25a      	sxtb	r2, r3
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <assembleButtons+0xd0>)
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b25a      	sxtb	r2, r3
	uint8_t buttonByte2 = (buttonStates[6] << 2)/*B*/
 80004d0:	1d7b      	adds	r3, r7, #5
 80004d2:	701a      	strb	r2, [r3, #0]

	aTxBuffer[2] = buttonByte0;
 80004d4:	4b09      	ldr	r3, [pc, #36]	; (80004fc <assembleButtons+0xd4>)
 80004d6:	1dfa      	adds	r2, r7, #7
 80004d8:	7812      	ldrb	r2, [r2, #0]
 80004da:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3] = buttonByte1;
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <assembleButtons+0xd4>)
 80004de:	1dba      	adds	r2, r7, #6
 80004e0:	7812      	ldrb	r2, [r2, #0]
 80004e2:	70da      	strb	r2, [r3, #3]
	aTxBuffer[4] = buttonByte2;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <assembleButtons+0xd4>)
 80004e6:	1d7a      	adds	r2, r7, #5
 80004e8:	7812      	ldrb	r2, [r2, #0]
 80004ea:	711a      	strb	r2, [r3, #4]
	calcOutgoingCrc();
 80004ec:	f7ff fec4 	bl	8000278 <calcOutgoingCrc>
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000198 	.word	0x20000198
 80004fc:	20000000 	.word	0x20000000

08000500 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000504:	f000 faae 	bl	8000a64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000508:	f000 f824 	bl	8000554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800050c:	f000 f8ca 	bl	80006a4 <MX_GPIO_Init>
	MX_DMA_Init();
 8000510:	f000 f8a2 	bl	8000658 <MX_DMA_Init>
	MX_SPI1_Init();
 8000514:	f000 f866 	bl	80005e4 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	wTransferState == TRANSFER_WAIT;
 8000518:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <main+0x44>)
 800051a:	681b      	ldr	r3, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		calcOutgoingCrc();
 800051c:	f7ff feac 	bl	8000278 <calcOutgoingCrc>
		wTransferState == TRANSFER_WAIT;
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <main+0x44>)
 8000522:	681b      	ldr	r3, [r3, #0]
		if (HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t*) aTxBuffer,
 8000524:	4a08      	ldr	r2, [pc, #32]	; (8000548 <main+0x48>)
 8000526:	4909      	ldr	r1, [pc, #36]	; (800054c <main+0x4c>)
 8000528:	4809      	ldr	r0, [pc, #36]	; (8000550 <main+0x50>)
 800052a:	2321      	movs	r3, #33	; 0x21
 800052c:	f001 fdf4 	bl	8002118 <HAL_SPI_TransmitReceive_DMA>
				(uint8_t*) aRxBuffer, BUFFER_SIZE) != HAL_OK) {
			/* Transfer error in transmission process */
			//Error_Handler();
		}
		while (wTransferState == TRANSFER_WAIT) {
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	4b04      	ldr	r3, [pc, #16]	; (8000544 <main+0x44>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d0fb      	beq.n	8000532 <main+0x32>
		}
		readAllButtons();
 800053a:	f7ff feaf 	bl	800029c <readAllButtons>
		assembleButtons();
 800053e:	f7ff ff73 	bl	8000428 <assembleButtons>
		calcOutgoingCrc();
 8000542:	e7eb      	b.n	800051c <main+0x1c>
 8000544:	20000194 	.word	0x20000194
 8000548:	20000170 	.word	0x20000170
 800054c:	20000000 	.word	0x20000000
 8000550:	2000004c 	.word	0x2000004c

08000554 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b093      	sub	sp, #76	; 0x4c
 8000558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800055a:	2410      	movs	r4, #16
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2338      	movs	r3, #56	; 0x38
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fb57 	bl	8002c18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800056a:	003b      	movs	r3, r7
 800056c:	0018      	movs	r0, r3
 800056e:	2310      	movs	r3, #16
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f002 fb50 	bl	8002c18 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f82f 	bl	80015e0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2202      	movs	r2, #2
 8000586:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0052      	lsls	r2, r2, #1
 800058e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000590:	193b      	adds	r3, r7, r4
 8000592:	2200      	movs	r2, #0
 8000594:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	2240      	movs	r2, #64	; 0x40
 800059a:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800059c:	193b      	adds	r3, r7, r4
 800059e:	2200      	movs	r2, #0
 80005a0:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 f85b 	bl	8001660 <HAL_RCC_OscConfig>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x5e>
		Error_Handler();
 80005ae:	f000 f915 	bl	80007dc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005b2:	003b      	movs	r3, r7
 80005b4:	2207      	movs	r2, #7
 80005b6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b8:	003b      	movs	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005be:	003b      	movs	r3, r7
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005ca:	003b      	movs	r3, r7
 80005cc:	2100      	movs	r1, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fb60 	bl	8001c94 <HAL_RCC_ClockConfig>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x88>
		Error_Handler();
 80005d8:	f000 f900 	bl	80007dc <Error_Handler>
	}
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b013      	add	sp, #76	; 0x4c
 80005e2:	bd90      	pop	{r4, r7, pc}

080005e4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80005e8:	4b19      	ldr	r3, [pc, #100]	; (8000650 <MX_SPI1_Init+0x6c>)
 80005ea:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <MX_SPI1_Init+0x70>)
 80005ec:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_SPI1_Init+0x6c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <MX_SPI1_Init+0x6c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_SPI1_Init+0x6c>)
 80005fc:	22e0      	movs	r2, #224	; 0xe0
 80005fe:	00d2      	lsls	r2, r2, #3
 8000600:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000602:	4b13      	ldr	r3, [pc, #76]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000608:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_SPI1_Init+0x6c>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <MX_SPI1_Init+0x6c>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000626:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000628:	2207      	movs	r2, #7
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <MX_SPI1_Init+0x6c>)
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000632:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_SPI1_Init+0x6c>)
 8000634:	2200      	movs	r2, #0
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <MX_SPI1_Init+0x6c>)
 800063a:	0018      	movs	r0, r3
 800063c:	f001 fcb4 	bl	8001fa8 <HAL_SPI_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_SPI1_Init+0x64>
		Error_Handler();
 8000644:	f000 f8ca 	bl	80007dc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	2000004c 	.word	0x2000004c
 8000654:	40013000 	.word	0x40013000

08000658 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_DMA_Init+0x48>)
 8000660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_DMA_Init+0x48>)
 8000664:	2101      	movs	r1, #1
 8000666:	430a      	orrs	r2, r1
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <MX_DMA_Init+0x48>)
 800066c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	2009      	movs	r0, #9
 800067c:	f000 fb24 	bl	8000cc8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000680:	2009      	movs	r0, #9
 8000682:	f000 fb36 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	200a      	movs	r0, #10
 800068c:	f000 fb1c 	bl	8000cc8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fb2e 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b002      	add	sp, #8
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40021000 	.word	0x40021000

080006a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006aa:	240c      	movs	r4, #12
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0018      	movs	r0, r3
 80006b0:	2314      	movs	r3, #20
 80006b2:	001a      	movs	r2, r3
 80006b4:	2100      	movs	r1, #0
 80006b6:	f002 faaf 	bl	8002c18 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	4b30      	ldr	r3, [pc, #192]	; (800077c <MX_GPIO_Init+0xd8>)
 80006bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006be:	4b2f      	ldr	r3, [pc, #188]	; (800077c <MX_GPIO_Init+0xd8>)
 80006c0:	2102      	movs	r1, #2
 80006c2:	430a      	orrs	r2, r1
 80006c4:	635a      	str	r2, [r3, #52]	; 0x34
 80006c6:	4b2d      	ldr	r3, [pc, #180]	; (800077c <MX_GPIO_Init+0xd8>)
 80006c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ca:	2202      	movs	r2, #2
 80006cc:	4013      	ands	r3, r2
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b2a      	ldr	r3, [pc, #168]	; (800077c <MX_GPIO_Init+0xd8>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006d6:	4b29      	ldr	r3, [pc, #164]	; (800077c <MX_GPIO_Init+0xd8>)
 80006d8:	2104      	movs	r1, #4
 80006da:	430a      	orrs	r2, r1
 80006dc:	635a      	str	r2, [r3, #52]	; 0x34
 80006de:	4b27      	ldr	r3, [pc, #156]	; (800077c <MX_GPIO_Init+0xd8>)
 80006e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006e2:	2204      	movs	r2, #4
 80006e4:	4013      	ands	r3, r2
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <MX_GPIO_Init+0xd8>)
 80006ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_GPIO_Init+0xd8>)
 80006f0:	2101      	movs	r1, #1
 80006f2:	430a      	orrs	r2, r1
 80006f4:	635a      	str	r2, [r3, #52]	; 0x34
 80006f6:	4b21      	ldr	r3, [pc, #132]	; (800077c <MX_GPIO_Init+0xd8>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000702:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <MX_GPIO_Init+0xdc>)
 8000704:	2200      	movs	r2, #0
 8000706:	2140      	movs	r1, #64	; 0x40
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ff4c 	bl	80015a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : IN_G10_Pin IN_G6_Pin IN_G7_Pin IN_G12_Pin
	 IN_G11_Pin IN_G1_Pin IN_G2_Pin IN_G8_Pin */
	GPIO_InitStruct.Pin = IN_G10_Pin | IN_G6_Pin | IN_G7_Pin | IN_G12_Pin
 800070e:	193b      	adds	r3, r7, r4
 8000710:	4a1c      	ldr	r2, [pc, #112]	; (8000784 <MX_GPIO_Init+0xe0>)
 8000712:	601a      	str	r2, [r3, #0]
			| IN_G11_Pin | IN_G1_Pin | IN_G2_Pin | IN_G8_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000714:	193b      	adds	r3, r7, r4
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2201      	movs	r2, #1
 800071e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	193b      	adds	r3, r7, r4
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <MX_GPIO_Init+0xe4>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f000 fdbc 	bl	80012a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : IN_SHIFTER_LEFT_Pin IN_G9_Pin IN_G5_Pin IN_G4_Pin
	 IN_G3_Pin IN_SHIFTER_RIGHT_Pin */
	GPIO_InitStruct.Pin = IN_SHIFTER_LEFT_Pin | IN_G9_Pin | IN_G5_Pin
 800072c:	193b      	adds	r3, r7, r4
 800072e:	22f9      	movs	r2, #249	; 0xf9
 8000730:	0152      	lsls	r2, r2, #5
 8000732:	601a      	str	r2, [r3, #0]
			| IN_G4_Pin | IN_G3_Pin | IN_SHIFTER_RIGHT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2200      	movs	r2, #0
 8000738:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	193b      	adds	r3, r7, r4
 800073c:	2201      	movs	r2, #1
 800073e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	193a      	adds	r2, r7, r4
 8000742:	23a0      	movs	r3, #160	; 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fdab 	bl	80012a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 800074e:	0021      	movs	r1, r4
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2240      	movs	r2, #64	; 0x40
 8000754:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2201      	movs	r2, #1
 800075a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000768:	187b      	adds	r3, r7, r1
 800076a:	4a05      	ldr	r2, [pc, #20]	; (8000780 <MX_GPIO_Init+0xdc>)
 800076c:	0019      	movs	r1, r3
 800076e:	0010      	movs	r0, r2
 8000770:	f000 fd98 	bl	80012a4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b009      	add	sp, #36	; 0x24
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	50000800 	.word	0x50000800
 8000784:	000003f5 	.word	0x000003f5
 8000788:	50000400 	.word	0x50000400

0800078c <HAL_SPI_TxRxCpltCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report end of DMA TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	/* Turn LED3 on: Transfer in transmission/reception process is complete */
	//BSP_LED_On(LED3);
	wTransferState = TRANSFER_COMPLETE;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_SPI_TxRxCpltCallback+0x20>)
 8000796:	2201      	movs	r2, #1
 8000798:	601a      	str	r2, [r3, #0]
	cntSucc++;
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_SPI_TxRxCpltCallback+0x24>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000194 	.word	0x20000194
 80007b0:	20000168 	.word	0x20000168

080007b4 <HAL_SPI_ErrorCallback>:
 * @param  hspi: SPI handle
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_SPI_ErrorCallback+0x20>)
 80007be:	2202      	movs	r2, #2
 80007c0:	601a      	str	r2, [r3, #0]
	cntErr++;
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <HAL_SPI_ErrorCallback+0x24>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <HAL_SPI_ErrorCallback+0x24>)
 80007ca:	601a      	str	r2, [r3, #0]
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000194 	.word	0x20000194
 80007d8:	2000016c 	.word	0x2000016c

080007dc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007e4:	e7fe      	b.n	80007e4 <Error_Handler+0x8>
	...

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x44>)
 80007f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <HAL_MspInit+0x44>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	641a      	str	r2, [r3, #64]	; 0x40
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <HAL_MspInit+0x44>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_MspInit+0x44>)
 8000808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x44>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0549      	lsls	r1, r1, #21
 8000810:	430a      	orrs	r2, r1
 8000812:	63da      	str	r2, [r3, #60]	; 0x3c
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_MspInit+0x44>)
 8000816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	055b      	lsls	r3, r3, #21
 800081c:	4013      	ands	r3, r2
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	2414      	movs	r4, #20
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	2314      	movs	r3, #20
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f002 f9e8 	bl	8002c18 <memset>
  if(hspi->Instance==SPI1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a49      	ldr	r2, [pc, #292]	; (8000974 <HAL_SPI_MspInit+0x144>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d000      	beq.n	8000854 <HAL_SPI_MspInit+0x24>
 8000852:	e08a      	b.n	800096a <HAL_SPI_MspInit+0x13a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <HAL_SPI_MspInit+0x148>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000858:	4b47      	ldr	r3, [pc, #284]	; (8000978 <HAL_SPI_MspInit+0x148>)
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	0149      	lsls	r1, r1, #5
 800085e:	430a      	orrs	r2, r1
 8000860:	641a      	str	r2, [r3, #64]	; 0x40
 8000862:	4b45      	ldr	r3, [pc, #276]	; (8000978 <HAL_SPI_MspInit+0x148>)
 8000864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	015b      	lsls	r3, r3, #5
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <HAL_SPI_MspInit+0x148>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000874:	4b40      	ldr	r3, [pc, #256]	; (8000978 <HAL_SPI_MspInit+0x148>)
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
 800087c:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <HAL_SPI_MspInit+0x148>)
 800087e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000880:	2201      	movs	r2, #1
 8000882:	4013      	ands	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000888:	0021      	movs	r1, r4
 800088a:	187b      	adds	r3, r7, r1
 800088c:	22d2      	movs	r2, #210	; 0xd2
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2202      	movs	r2, #2
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	; 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f000 fcf7 	bl	80012a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 80008b6:	4b31      	ldr	r3, [pc, #196]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <HAL_SPI_MspInit+0x150>)
 80008ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80008bc:	4b2f      	ldr	r3, [pc, #188]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008be:	2211      	movs	r2, #17
 80008c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008c4:	2210      	movs	r2, #16
 80008c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008ce:	4b2b      	ldr	r3, [pc, #172]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008da:	4b28      	ldr	r3, [pc, #160]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e6:	4b25      	ldr	r3, [pc, #148]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80008ec:	4b23      	ldr	r3, [pc, #140]	; (800097c <HAL_SPI_MspInit+0x14c>)
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fa1c 	bl	8000d2c <HAL_DMA_Init>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80008f8:	f7ff ff70 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_SPI_MspInit+0x14c>)
 8000900:	655a      	str	r2, [r3, #84]	; 0x54
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_SPI_MspInit+0x14c>)
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_SPI_MspInit+0x154>)
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <HAL_SPI_MspInit+0x158>)
 800090c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000910:	2210      	movs	r2, #16
 8000912:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_SPI_MspInit+0x154>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_SPI_MspInit+0x154>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_SPI_MspInit+0x154>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f9f3 	bl	8000d2c <HAL_DMA_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 800094a:	f7ff ff47 	bl	80007dc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000952:	659a      	str	r2, [r3, #88]	; 0x58
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_SPI_MspInit+0x154>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2019      	movs	r0, #25
 8000960:	f000 f9b2 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000964:	2019      	movs	r0, #25
 8000966:	f000 f9c4 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00b      	add	sp, #44	; 0x2c
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40013000 	.word	0x40013000
 8000978:	40021000 	.word	0x40021000
 800097c:	200000b0 	.word	0x200000b0
 8000980:	40020008 	.word	0x40020008
 8000984:	2000010c 	.word	0x2000010c
 8000988:	4002001c 	.word	0x4002001c

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f8c2 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <DMA1_Channel1_IRQHandler+0x14>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fb2c 	bl	8001020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	200000b0 	.word	0x200000b0

080009d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fb20 	bl	8001020 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	2000010c 	.word	0x2000010c

080009ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <SPI1_IRQHandler+0x14>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fd42 	bl	800247c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	2000004c 	.word	0x2000004c

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff fff6 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f002 f8f3 	bl	8002c28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a42:	f7ff fd5d 	bl	8000500 <main>

08000a46 <LoopForever>:

LoopForever:
  b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000a54:	08002dd0 	.word	0x08002dd0
  ldr r2, =_sbss
 8000a58:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000a5c:	200001ac 	.word	0x200001ac

08000a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x3c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Init+0x3c>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0049      	lsls	r1, r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f810 	bl	8000aa4 <HAL_InitTick>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff feaa 	bl	80007e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_InitTick+0x88>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d02b      	beq.n	8000b14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0x8c>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_InitTick+0x88>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	0098      	lsls	r0, r3, #2
 8000aca:	f7ff fb1b 	bl	8000104 <__udivsi3>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	f7ff fb16 	bl	8000104 <__udivsi3>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f919 	bl	8000d12 <HAL_SYSTICK_Config>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d112      	bne.n	8000b0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80a      	bhi.n	8000b00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8e8 	bl	8000cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_InitTick+0x90>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e00d      	b.n	8000b1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e008      	b.n	8000b1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e003      	b.n	8000b1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b005      	add	sp, #20
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	2000002c 	.word	0x2000002c
 8000b30:	20000024 	.word	0x20000024
 8000b34:	20000028 	.word	0x20000028

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	2000002c 	.word	0x2000002c
 8000b58:	200001a8 	.word	0x200001a8

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	200001a8 	.word	0x200001a8

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b7f      	cmp	r3, #127	; 0x7f
 8000b82:	d809      	bhi.n	8000b98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	231f      	movs	r3, #31
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_EnableIRQ+0x30>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d828      	bhi.n	8000c0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	33c0      	adds	r3, #192	; 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	589b      	ldr	r3, [r3, r2]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	33c0      	adds	r3, #192	; 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c0a:	e031      	b.n	8000c70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0019      	movs	r1, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	400b      	ands	r3, r1
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	3304      	adds	r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	400a      	ands	r2, r1
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	21ff      	movs	r1, #255	; 0xff
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	401a      	ands	r2, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	4003      	ands	r3, r0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	4023      	ands	r3, r4
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	3306      	adds	r3, #6
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	18c3      	adds	r3, r0, r3
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	045b      	lsls	r3, r3, #17
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d301      	bcc.n	8000c98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c94:	2301      	movs	r3, #1
 8000c96:	e010      	b.n	8000cba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SysTick_Config+0x44>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff7c 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x44>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	1c02      	adds	r2, r0, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff33 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffaf 	bl	8000c80 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e077      	b.n	8000e2e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_DMA_Init+0x10c>)
 8000d44:	4694      	mov	ip, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	2114      	movs	r1, #20
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff f9da 	bl	8000104 <__udivsi3>
 8000d50:	0003      	movs	r3, r0
 8000d52:	009a      	lsls	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2225      	movs	r2, #37	; 0x25
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4934      	ldr	r1, [pc, #208]	; (8000e3c <HAL_DMA_Init+0x110>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 fa2b 	bl	8001204 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d102      	bne.n	8000dc0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	213f      	movs	r1, #63	; 0x3f
 8000dca:	400a      	ands	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000dd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d011      	beq.n	8000e04 <HAL_DMA_Init+0xd8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d80d      	bhi.n	8000e04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fa36 	bl	800125c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	e008      	b.n	8000e16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2225      	movs	r2, #37	; 0x25
 8000e20:	2101      	movs	r1, #1
 8000e22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	; 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	bffdfff8 	.word	0xbffdfff8
 8000e3c:	ffff800f 	.word	0xffff800f

08000e40 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2317      	movs	r3, #23
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2224      	movs	r2, #36	; 0x24
 8000e5a:	5c9b      	ldrb	r3, [r3, r2]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d101      	bne.n	8000e64 <HAL_DMA_Start_IT+0x24>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e06f      	b.n	8000f44 <HAL_DMA_Start_IT+0x104>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	2101      	movs	r1, #1
 8000e6a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2225      	movs	r2, #37	; 0x25
 8000e70:	5c9b      	ldrb	r3, [r3, r2]
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d157      	bne.n	8000f28 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2225      	movs	r2, #37	; 0x25
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2200      	movs	r2, #0
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	438a      	bics	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	687a      	ldr	r2, [r7, #4]
 8000e9a:	68b9      	ldr	r1, [r7, #8]
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f000 f971 	bl	8001184 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d008      	beq.n	8000ebc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	210e      	movs	r1, #14
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	e00f      	b.n	8000edc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	438a      	bics	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	210a      	movs	r1, #10
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	025b      	lsls	r3, r3, #9
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d008      	beq.n	8000efc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0049      	lsls	r1, r1, #1
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d008      	beq.n	8000f16 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f0e:	2180      	movs	r1, #128	; 0x80
 8000f10:	0049      	lsls	r1, r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e00a      	b.n	8000f3e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2224      	movs	r2, #36	; 0x24
 8000f32:	2100      	movs	r1, #0
 8000f34:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8000f36:	2317      	movs	r3, #23
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000f3e:	2317      	movs	r3, #23
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b006      	add	sp, #24
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f54:	210f      	movs	r1, #15
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2225      	movs	r2, #37	; 0x25
 8000f60:	5c9b      	ldrb	r3, [r3, r2]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d006      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2201      	movs	r2, #1
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e049      	b.n	800100a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	210e      	movs	r1, #14
 8000f82:	438a      	bics	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	438a      	bics	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	491d      	ldr	r1, [pc, #116]	; (8001018 <HAL_DMA_Abort_IT+0xcc>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_DMA_Abort_IT+0xd0>)
 8000fa8:	6859      	ldr	r1, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	221c      	movs	r2, #28
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_DMA_Abort_IT+0xd0>)
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000fc4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00c      	beq.n	8000fe8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd8:	490f      	ldr	r1, [pc, #60]	; (8001018 <HAL_DMA_Abort_IT+0xcc>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000fe6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2225      	movs	r2, #37	; 0x25
 8000fec:	2101      	movs	r1, #1
 8000fee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d004      	beq.n	800100a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	0010      	movs	r0, r2
 8001008:	4798      	blx	r3
    }
  }
  return status;
 800100a:	230f      	movs	r3, #15
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
}
 8001010:	0018      	movs	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	b004      	add	sp, #16
 8001016:	bd80      	pop	{r7, pc}
 8001018:	fffffeff 	.word	0xfffffeff
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001028:	4b55      	ldr	r3, [pc, #340]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	221c      	movs	r2, #28
 800103c:	4013      	ands	r3, r2
 800103e:	2204      	movs	r2, #4
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4013      	ands	r3, r2
 8001048:	d027      	beq.n	800109a <HAL_DMA_IRQHandler+0x7a>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2204      	movs	r2, #4
 800104e:	4013      	ands	r3, r2
 8001050:	d023      	beq.n	800109a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2220      	movs	r2, #32
 800105a:	4013      	ands	r3, r2
 800105c:	d107      	bne.n	800106e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2104      	movs	r1, #4
 800106a:	438a      	bics	r2, r1
 800106c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	221c      	movs	r2, #28
 8001078:	4013      	ands	r3, r2
 800107a:	2204      	movs	r2, #4
 800107c:	409a      	lsls	r2, r3
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	2b00      	cmp	r3, #0
 800108a:	d100      	bne.n	800108e <HAL_DMA_IRQHandler+0x6e>
 800108c:	e073      	b.n	8001176 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	0010      	movs	r0, r2
 8001096:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001098:	e06d      	b.n	8001176 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	221c      	movs	r2, #28
 80010a0:	4013      	ands	r3, r2
 80010a2:	2202      	movs	r2, #2
 80010a4:	409a      	lsls	r2, r3
 80010a6:	0013      	movs	r3, r2
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4013      	ands	r3, r2
 80010ac:	d02e      	beq.n	800110c <HAL_DMA_IRQHandler+0xec>
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	2202      	movs	r2, #2
 80010b2:	4013      	ands	r3, r2
 80010b4:	d02a      	beq.n	800110c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2220      	movs	r2, #32
 80010be:	4013      	ands	r3, r2
 80010c0:	d10b      	bne.n	80010da <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	210a      	movs	r1, #10
 80010ce:	438a      	bics	r2, r1
 80010d0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2225      	movs	r2, #37	; 0x25
 80010d6:	2101      	movs	r1, #1
 80010d8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 80010dc:	6859      	ldr	r1, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	221c      	movs	r2, #28
 80010e4:	4013      	ands	r3, r2
 80010e6:	2202      	movs	r2, #2
 80010e8:	409a      	lsls	r2, r3
 80010ea:	4b25      	ldr	r3, [pc, #148]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2100      	movs	r1, #0
 80010f6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d03a      	beq.n	8001176 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	0010      	movs	r0, r2
 8001108:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800110a:	e034      	b.n	8001176 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	221c      	movs	r2, #28
 8001112:	4013      	ands	r3, r2
 8001114:	2208      	movs	r2, #8
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	d02b      	beq.n	8001178 <HAL_DMA_IRQHandler+0x158>
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2208      	movs	r2, #8
 8001124:	4013      	ands	r3, r2
 8001126:	d027      	beq.n	8001178 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	210e      	movs	r1, #14
 8001134:	438a      	bics	r2, r1
 8001136:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	221c      	movs	r2, #28
 8001142:	4013      	ands	r3, r2
 8001144:	2201      	movs	r2, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_DMA_IRQHandler+0x160>)
 800114a:	430a      	orrs	r2, r1
 800114c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2201      	movs	r2, #1
 8001152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2225      	movs	r2, #37	; 0x25
 8001158:	2101      	movs	r1, #1
 800115a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	0010      	movs	r0, r2
 8001174:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46c0      	nop			; (mov r8, r8)
}
 800117a:	46bd      	mov	sp, r7
 800117c:	b004      	add	sp, #16
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40020000 	.word	0x40020000

08001184 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800119a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80011ac:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <DMA_SetConfig+0x7c>)
 80011b0:	6859      	ldr	r1, [r3, #4]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	221c      	movs	r2, #28
 80011b8:	4013      	ands	r3, r2
 80011ba:	2201      	movs	r2, #1
 80011bc:	409a      	lsls	r2, r3
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <DMA_SetConfig+0x7c>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b10      	cmp	r3, #16
 80011d2:	d108      	bne.n	80011e6 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011e4:	e007      	b.n	80011f6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	60da      	str	r2, [r3, #12]
}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	40020000 	.word	0x40020000

08001204 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001214:	4694      	mov	ip, r2
 8001216:	4463      	add	r3, ip
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	001a      	movs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	001a      	movs	r2, r3
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	4013      	ands	r3, r2
 800122a:	3b08      	subs	r3, #8
 800122c:	2114      	movs	r1, #20
 800122e:	0018      	movs	r0, r3
 8001230:	f7fe ff68 	bl	8000104 <__udivsi3>
 8001234:	0003      	movs	r3, r0
 8001236:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	; (8001258 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800123c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	221f      	movs	r2, #31
 8001242:	4013      	ands	r3, r2
 8001244:	2201      	movs	r2, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b004      	add	sp, #16
 8001252:	bd80      	pop	{r7, pc}
 8001254:	10008200 	.word	0x10008200
 8001258:	40020880 	.word	0x40020880

0800125c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	223f      	movs	r2, #63	; 0x3f
 800126a:	4013      	ands	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001272:	4694      	mov	ip, r2
 8001274:	4463      	add	r3, ip
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	001a      	movs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001282:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3b01      	subs	r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
 800128c:	2201      	movs	r2, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}
 800129c:	1000823f 	.word	0x1000823f
 80012a0:	40020940 	.word	0x40020940

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b2:	e147      	b.n	8001544 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2101      	movs	r1, #1
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	4013      	ands	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d100      	bne.n	80012cc <HAL_GPIO_Init+0x28>
 80012ca:	e138      	b.n	800153e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2203      	movs	r2, #3
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <HAL_GPIO_Init+0x40>
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	4013      	ands	r3, r2
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d130      	bne.n	8001346 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	2203      	movs	r2, #3
 80012f0:	409a      	lsls	r2, r3
 80012f2:	0013      	movs	r3, r2
 80012f4:	43da      	mvns	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	409a      	lsls	r2, r3
 8001306:	0013      	movs	r3, r2
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800131a:	2201      	movs	r2, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	091b      	lsrs	r3, r3, #4
 8001330:	2201      	movs	r2, #1
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2203      	movs	r2, #3
 800134c:	4013      	ands	r3, r2
 800134e:	2b03      	cmp	r3, #3
 8001350:	d017      	beq.n	8001382 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	409a      	lsls	r2, r3
 8001360:	0013      	movs	r3, r2
 8001362:	43da      	mvns	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2203      	movs	r2, #3
 8001388:	4013      	ands	r3, r2
 800138a:	2b02      	cmp	r3, #2
 800138c:	d123      	bne.n	80013d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	08da      	lsrs	r2, r3, #3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3208      	adds	r2, #8
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	58d3      	ldr	r3, [r2, r3]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	2207      	movs	r2, #7
 80013a0:	4013      	ands	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	220f      	movs	r2, #15
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	43da      	mvns	r2, r3
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2107      	movs	r1, #7
 80013ba:	400b      	ands	r3, r1
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	08da      	lsrs	r2, r3, #3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3208      	adds	r2, #8
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	6939      	ldr	r1, [r7, #16]
 80013d4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	43da      	mvns	r2, r3
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2203      	movs	r2, #3
 80013f4:	401a      	ands	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	23c0      	movs	r3, #192	; 0xc0
 8001410:	029b      	lsls	r3, r3, #10
 8001412:	4013      	ands	r3, r2
 8001414:	d100      	bne.n	8001418 <HAL_GPIO_Init+0x174>
 8001416:	e092      	b.n	800153e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001418:	4a50      	ldr	r2, [pc, #320]	; (800155c <HAL_GPIO_Init+0x2b8>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3318      	adds	r3, #24
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	589b      	ldr	r3, [r3, r2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	220f      	movs	r2, #15
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	23a0      	movs	r3, #160	; 0xa0
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	429a      	cmp	r2, r3
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1ca>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_GPIO_Init+0x2bc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1c6>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a44      	ldr	r2, [pc, #272]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1c2>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a43      	ldr	r2, [pc, #268]	; (8001568 <HAL_GPIO_Init+0x2c4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1be>
 800145e:	2303      	movs	r3, #3
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x1cc>
 8001462:	2305      	movs	r3, #5
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x1cc>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x1cc>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x1cc>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2103      	movs	r1, #3
 8001474:	400a      	ands	r2, r1
 8001476:	00d2      	lsls	r2, r2, #3
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001480:	4936      	ldr	r1, [pc, #216]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3318      	adds	r3, #24
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148e:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	035b      	lsls	r3, r3, #13
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b2:	4b2a      	ldr	r3, [pc, #168]	; (800155c <HAL_GPIO_Init+0x2b8>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <HAL_GPIO_Init+0x2b8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	039b      	lsls	r3, r3, #14
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <HAL_GPIO_Init+0x2b8>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e2:	4a1e      	ldr	r2, [pc, #120]	; (800155c <HAL_GPIO_Init+0x2b8>)
 80014e4:	2384      	movs	r3, #132	; 0x84
 80014e6:	58d3      	ldr	r3, [r2, r3]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	43da      	mvns	r2, r3
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	029b      	lsls	r3, r3, #10
 80014fc:	4013      	ands	r3, r2
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001508:	4914      	ldr	r1, [pc, #80]	; (800155c <HAL_GPIO_Init+0x2b8>)
 800150a:	2284      	movs	r2, #132	; 0x84
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001510:	4a12      	ldr	r2, [pc, #72]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	58d3      	ldr	r3, [r2, r3]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	025b      	lsls	r3, r3, #9
 800152a:	4013      	ands	r3, r2
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001536:	4909      	ldr	r1, [pc, #36]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	3301      	adds	r3, #1
 8001542:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	40da      	lsrs	r2, r3
 800154c:	1e13      	subs	r3, r2, #0
 800154e:	d000      	beq.n	8001552 <HAL_GPIO_Init+0x2ae>
 8001550:	e6b0      	b.n	80012b4 <HAL_GPIO_Init+0x10>
  }
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b006      	add	sp, #24
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021800 	.word	0x40021800
 8001560:	50000400 	.word	0x50000400
 8001564:	50000800 	.word	0x50000800
 8001568:	50000c00 	.word	0x50000c00

0800156c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	000a      	movs	r2, r1
 8001576:	1cbb      	adds	r3, r7, #2
 8001578:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	1cba      	adds	r2, r7, #2
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	4013      	ands	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e003      	b.n	8001598 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
}
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	0008      	movs	r0, r1
 80015b0:	0011      	movs	r1, r2
 80015b2:	1cbb      	adds	r3, r7, #2
 80015b4:	1c02      	adds	r2, r0, #0
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	1c7b      	adds	r3, r7, #1
 80015ba:	1c0a      	adds	r2, r1, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	1c7b      	adds	r3, r7, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d0:	1cbb      	adds	r3, r7, #2
 80015d2:	881a      	ldrh	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a19      	ldr	r2, [pc, #100]	; (8001654 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	429a      	cmp	r2, r3
 8001602:	d11f      	bne.n	8001644 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001604:	4b14      	ldr	r3, [pc, #80]	; (8001658 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	0013      	movs	r3, r2
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	189b      	adds	r3, r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4912      	ldr	r1, [pc, #72]	; (800165c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001612:	0018      	movs	r0, r3
 8001614:	f7fe fd76 	bl	8000104 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800161e:	e008      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	3b01      	subs	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	e001      	b.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e009      	b.n	8001646 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	401a      	ands	r2, r3
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	429a      	cmp	r2, r3
 8001642:	d0ed      	beq.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b004      	add	sp, #16
 800164c:	bd80      	pop	{r7, pc}
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40007000 	.word	0x40007000
 8001654:	fffff9ff 	.word	0xfffff9ff
 8001658:	20000024 	.word	0x20000024
 800165c:	000f4240 	.word	0x000f4240

08001660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e2fe      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d100      	bne.n	800167e <HAL_RCC_OscConfig+0x1e>
 800167c:	e07c      	b.n	8001778 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800167e:	4bc3      	ldr	r3, [pc, #780]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2238      	movs	r2, #56	; 0x38
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001688:	4bc0      	ldr	r3, [pc, #768]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	2203      	movs	r2, #3
 800168e:	4013      	ands	r3, r2
 8001690:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b10      	cmp	r3, #16
 8001696:	d102      	bne.n	800169e <HAL_RCC_OscConfig+0x3e>
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4bb9      	ldr	r3, [pc, #740]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	029b      	lsls	r3, r3, #10
 80016ac:	4013      	ands	r3, r2
 80016ae:	d062      	beq.n	8001776 <HAL_RCC_OscConfig+0x116>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d15e      	bne.n	8001776 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e2d9      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x78>
 80016c8:	4bb0      	ldr	r3, [pc, #704]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4baf      	ldr	r3, [pc, #700]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016ce:	2180      	movs	r1, #128	; 0x80
 80016d0:	0249      	lsls	r1, r1, #9
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	e020      	b.n	800171a <HAL_RCC_OscConfig+0xba>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	23a0      	movs	r3, #160	; 0xa0
 80016de:	02db      	lsls	r3, r3, #11
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10e      	bne.n	8001702 <HAL_RCC_OscConfig+0xa2>
 80016e4:	4ba9      	ldr	r3, [pc, #676]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4ba8      	ldr	r3, [pc, #672]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016ea:	2180      	movs	r1, #128	; 0x80
 80016ec:	02c9      	lsls	r1, r1, #11
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	4ba6      	ldr	r3, [pc, #664]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4ba5      	ldr	r3, [pc, #660]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0249      	lsls	r1, r1, #9
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0xba>
 8001702:	4ba2      	ldr	r3, [pc, #648]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4ba1      	ldr	r3, [pc, #644]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001708:	49a1      	ldr	r1, [pc, #644]	; (8001990 <HAL_RCC_OscConfig+0x330>)
 800170a:	400a      	ands	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4b9f      	ldr	r3, [pc, #636]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b9e      	ldr	r3, [pc, #632]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001714:	499f      	ldr	r1, [pc, #636]	; (8001994 <HAL_RCC_OscConfig+0x334>)
 8001716:	400a      	ands	r2, r1
 8001718:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d014      	beq.n	800174c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fa1b 	bl	8000b5c <HAL_GetTick>
 8001726:	0003      	movs	r3, r0
 8001728:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fa16 	bl	8000b5c <HAL_GetTick>
 8001730:	0002      	movs	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e298      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173e:	4b93      	ldr	r3, [pc, #588]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	029b      	lsls	r3, r3, #10
 8001746:	4013      	ands	r3, r2
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xcc>
 800174a:	e015      	b.n	8001778 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fa06 	bl	8000b5c <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001756:	f7ff fa01 	bl	8000b5c <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b64      	cmp	r3, #100	; 0x64
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e283      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001768:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	029b      	lsls	r3, r3, #10
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0xf6>
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2202      	movs	r2, #2
 800177e:	4013      	ands	r3, r2
 8001780:	d100      	bne.n	8001784 <HAL_RCC_OscConfig+0x124>
 8001782:	e099      	b.n	80018b8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4b81      	ldr	r3, [pc, #516]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2238      	movs	r2, #56	; 0x38
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2203      	movs	r2, #3
 8001794:	4013      	ands	r3, r2
 8001796:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b10      	cmp	r3, #16
 800179c:	d102      	bne.n	80017a4 <HAL_RCC_OscConfig+0x144>
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d002      	beq.n	80017aa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d135      	bne.n	8001816 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017aa:	4b78      	ldr	r3, [pc, #480]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x162>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e256      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b72      	ldr	r3, [pc, #456]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a74      	ldr	r2, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x338>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	0019      	movs	r1, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	021a      	lsls	r2, r3, #8
 80017d2:	4b6e      	ldr	r3, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d112      	bne.n	8001804 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017de:	4b6b      	ldr	r3, [pc, #428]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6e      	ldr	r2, [pc, #440]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	4b67      	ldr	r3, [pc, #412]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80017f2:	4b66      	ldr	r3, [pc, #408]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	0adb      	lsrs	r3, r3, #11
 80017f8:	2207      	movs	r2, #7
 80017fa:	4013      	ands	r3, r2
 80017fc:	4a68      	ldr	r2, [pc, #416]	; (80019a0 <HAL_RCC_OscConfig+0x340>)
 80017fe:	40da      	lsrs	r2, r3
 8001800:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <HAL_RCC_OscConfig+0x344>)
 8001802:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x348>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff f94b 	bl	8000aa4 <HAL_InitTick>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d051      	beq.n	80018b6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e22c      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d030      	beq.n	8001880 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800181e:	4b5b      	ldr	r3, [pc, #364]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a5e      	ldr	r2, [pc, #376]	; (800199c <HAL_RCC_OscConfig+0x33c>)
 8001824:	4013      	ands	r3, r2
 8001826:	0019      	movs	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	4b57      	ldr	r3, [pc, #348]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800182e:	430a      	orrs	r2, r1
 8001830:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4b55      	ldr	r3, [pc, #340]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0049      	lsls	r1, r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f98c 	bl	8000b5c <HAL_GetTick>
 8001844:	0003      	movs	r3, r0
 8001846:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff f987 	bl	8000b5c <HAL_GetTick>
 800184e:	0002      	movs	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e209      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4013      	ands	r3, r2
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b48      	ldr	r3, [pc, #288]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4a4a      	ldr	r2, [pc, #296]	; (8001998 <HAL_RCC_OscConfig+0x338>)
 800186e:	4013      	ands	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	021a      	lsls	r2, r3, #8
 8001878:	4b44      	ldr	r3, [pc, #272]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800187a:	430a      	orrs	r2, r1
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	e01b      	b.n	80018b8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001880:	4b42      	ldr	r3, [pc, #264]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001886:	4949      	ldr	r1, [pc, #292]	; (80019ac <HAL_RCC_OscConfig+0x34c>)
 8001888:	400a      	ands	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff f966 	bl	8000b5c <HAL_GetTick>
 8001890:	0003      	movs	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff f961 	bl	8000b5c <HAL_GetTick>
 800189a:	0002      	movs	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e1e3      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4013      	ands	r3, r2
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x236>
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2208      	movs	r2, #8
 80018be:	4013      	ands	r3, r2
 80018c0:	d047      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2238      	movs	r2, #56	; 0x38
 80018c8:	4013      	ands	r3, r2
 80018ca:	2b18      	cmp	r3, #24
 80018cc:	d10a      	bne.n	80018e4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	2202      	movs	r2, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d03c      	beq.n	8001952 <HAL_RCC_OscConfig+0x2f2>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d138      	bne.n	8001952 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e1c5      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d019      	beq.n	8001920 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80018ec:	4b27      	ldr	r3, [pc, #156]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80018ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f930 	bl	8000b5c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff f92b 	bl	8000b5c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1ad      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001918:	2202      	movs	r2, #2
 800191a:	4013      	ands	r3, r2
 800191c:	d0f1      	beq.n	8001902 <HAL_RCC_OscConfig+0x2a2>
 800191e:	e018      	b.n	8001952 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001922:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001926:	2101      	movs	r1, #1
 8001928:	438a      	bics	r2, r1
 800192a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f916 	bl	8000b5c <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001936:	f7ff f911 	bl	8000b5c <HAL_GetTick>
 800193a:	0002      	movs	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e193      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 800194a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f1      	bne.n	8001936 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2204      	movs	r2, #4
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x2fe>
 800195c:	e0c6      	b.n	8001aec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	231f      	movs	r3, #31
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2200      	movs	r2, #0
 8001964:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2238      	movs	r2, #56	; 0x38
 800196c:	4013      	ands	r3, r2
 800196e:	2b20      	cmp	r3, #32
 8001970:	d11e      	bne.n	80019b0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <HAL_RCC_OscConfig+0x32c>)
 8001974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d100      	bne.n	800197e <HAL_RCC_OscConfig+0x31e>
 800197c:	e0b6      	b.n	8001aec <HAL_RCC_OscConfig+0x48c>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d000      	beq.n	8001988 <HAL_RCC_OscConfig+0x328>
 8001986:	e0b1      	b.n	8001aec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e171      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
 800198c:	40021000 	.word	0x40021000
 8001990:	fffeffff 	.word	0xfffeffff
 8001994:	fffbffff 	.word	0xfffbffff
 8001998:	ffff80ff 	.word	0xffff80ff
 800199c:	ffffc7ff 	.word	0xffffc7ff
 80019a0:	00f42400 	.word	0x00f42400
 80019a4:	20000024 	.word	0x20000024
 80019a8:	20000028 	.word	0x20000028
 80019ac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019b0:	4bb1      	ldr	r3, [pc, #708]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 80019b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	055b      	lsls	r3, r3, #21
 80019b8:	4013      	ands	r3, r2
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x360>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x362>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d011      	beq.n	80019ea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4bac      	ldr	r3, [pc, #688]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 80019c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ca:	4bab      	ldr	r3, [pc, #684]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 80019cc:	2180      	movs	r1, #128	; 0x80
 80019ce:	0549      	lsls	r1, r1, #21
 80019d0:	430a      	orrs	r2, r1
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80019d4:	4ba8      	ldr	r3, [pc, #672]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 80019d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	055b      	lsls	r3, r3, #21
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80019e2:	231f      	movs	r3, #31
 80019e4:	18fb      	adds	r3, r7, r3
 80019e6:	2201      	movs	r2, #1
 80019e8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4ba4      	ldr	r3, [pc, #656]	; (8001c7c <HAL_RCC_OscConfig+0x61c>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4013      	ands	r3, r2
 80019f4:	d11a      	bne.n	8001a2c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f6:	4ba1      	ldr	r3, [pc, #644]	; (8001c7c <HAL_RCC_OscConfig+0x61c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4ba0      	ldr	r3, [pc, #640]	; (8001c7c <HAL_RCC_OscConfig+0x61c>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	0049      	lsls	r1, r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a04:	f7ff f8aa 	bl	8000b5c <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0e:	f7ff f8a5 	bl	8000b5c <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e127      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a20:	4b96      	ldr	r3, [pc, #600]	; (8001c7c <HAL_RCC_OscConfig+0x61c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d106      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3e2>
 8001a34:	4b90      	ldr	r3, [pc, #576]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a38:	4b8f      	ldr	r3, [pc, #572]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x41c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d10c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x404>
 8001a4a:	4b8b      	ldr	r3, [pc, #556]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a4e:	4b8a      	ldr	r3, [pc, #552]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a50:	2104      	movs	r1, #4
 8001a52:	430a      	orrs	r2, r1
 8001a54:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a56:	4b88      	ldr	r3, [pc, #544]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a5a:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a62:	e00b      	b.n	8001a7c <HAL_RCC_OscConfig+0x41c>
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a68:	4b83      	ldr	r3, [pc, #524]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a70:	4b81      	ldr	r3, [pc, #516]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001a76:	2104      	movs	r1, #4
 8001a78:	438a      	bics	r2, r1
 8001a7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d014      	beq.n	8001aae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f86a 	bl	8000b5c <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8c:	e009      	b.n	8001aa2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8e:	f7ff f865 	bl	8000b5c <HAL_GetTick>
 8001a92:	0002      	movs	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_RCC_OscConfig+0x620>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e0e6      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa2:	4b75      	ldr	r3, [pc, #468]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x42e>
 8001aac:	e013      	b.n	8001ad6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f855 	bl	8000b5c <HAL_GetTick>
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ab6:	e009      	b.n	8001acc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f850 	bl	8000b5c <HAL_GetTick>
 8001abc:	0002      	movs	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	4a6f      	ldr	r2, [pc, #444]	; (8001c80 <HAL_RCC_OscConfig+0x620>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e0d1      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001acc:	4b6a      	ldr	r3, [pc, #424]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ad6:	231f      	movs	r3, #31
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d105      	bne.n	8001aec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ae0:	4b65      	ldr	r3, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ae4:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001ae6:	4967      	ldr	r1, [pc, #412]	; (8001c84 <HAL_RCC_OscConfig+0x624>)
 8001ae8:	400a      	ands	r2, r1
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d100      	bne.n	8001af6 <HAL_RCC_OscConfig+0x496>
 8001af4:	e0bb      	b.n	8001c6e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2238      	movs	r2, #56	; 0x38
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b10      	cmp	r3, #16
 8001b00:	d100      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4a4>
 8001b02:	e07b      	b.n	8001bfc <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d156      	bne.n	8001bba <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b5a      	ldr	r3, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b12:	495d      	ldr	r1, [pc, #372]	; (8001c88 <HAL_RCC_OscConfig+0x628>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f820 	bl	8000b5c <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff f81b 	bl	8000b5c <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e09d      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	049b      	lsls	r3, r3, #18
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <HAL_RCC_OscConfig+0x62c>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	0019      	movs	r1, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b40      	ldr	r3, [pc, #256]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b3f      	ldr	r3, [pc, #252]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0449      	lsls	r1, r1, #17
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0549      	lsls	r1, r1, #21
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe ffe4 	bl	8000b5c <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe ffdf 	bl	8000b5c <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e061      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	049b      	lsls	r3, r3, #18
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x53a>
 8001bb8:	e059      	b.n	8001c6e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001bc0:	4931      	ldr	r1, [pc, #196]	; (8001c88 <HAL_RCC_OscConfig+0x628>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7fe ffc9 	bl	8000b5c <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe ffc4 	bl	8000b5c <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e046      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	049b      	lsls	r3, r3, #18
 8001bea:	4013      	ands	r3, r2
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001bee:	4b22      	ldr	r3, [pc, #136]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001bf4:	4926      	ldr	r1, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x630>)
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	e038      	b.n	8001c6e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e033      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_RCC_OscConfig+0x618>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2203      	movs	r2, #3
 8001c12:	401a      	ands	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d126      	bne.n	8001c6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	2270      	movs	r2, #112	; 0x70
 8001c20:	401a      	ands	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d11f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	23fe      	movs	r3, #254	; 0xfe
 8001c2e:	01db      	lsls	r3, r3, #7
 8001c30:	401a      	ands	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d116      	bne.n	8001c6a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	23f8      	movs	r3, #248	; 0xf8
 8001c40:	039b      	lsls	r3, r3, #14
 8001c42:	401a      	ands	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10e      	bne.n	8001c6a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	23e0      	movs	r3, #224	; 0xe0
 8001c50:	051b      	lsls	r3, r3, #20
 8001c52:	401a      	ands	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	0f5b      	lsrs	r3, r3, #29
 8001c60:	075a      	lsls	r2, r3, #29
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b008      	add	sp, #32
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
 8001c80:	00001388 	.word	0x00001388
 8001c84:	efffffff 	.word	0xefffffff
 8001c88:	feffffff 	.word	0xfeffffff
 8001c8c:	11c1808c 	.word	0x11c1808c
 8001c90:	eefefffc 	.word	0xeefefffc

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0e9      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2207      	movs	r2, #7
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d91e      	bls.n	8001cf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b73      	ldr	r3, [pc, #460]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2207      	movs	r2, #7
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b70      	ldr	r3, [pc, #448]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cc8:	f7fe ff48 	bl	8000b5c <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd2:	f7fe ff43 	bl	8000b5c <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	4a6a      	ldr	r2, [pc, #424]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0ca      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce6:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2207      	movs	r2, #7
 8001cec:	4013      	ands	r3, r2
 8001cee:	683a      	ldr	r2, [r7, #0]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d1ee      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d015      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2204      	movs	r2, #4
 8001d04:	4013      	ands	r3, r2
 8001d06:	d006      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d08:	4b60      	ldr	r3, [pc, #384]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d0e:	21e0      	movs	r1, #224	; 0xe0
 8001d10:	01c9      	lsls	r1, r1, #7
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4a5d      	ldr	r2, [pc, #372]	; (8001e90 <HAL_RCC_ClockConfig+0x1fc>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d057      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d3c:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d12b      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e097      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d54:	4b4d      	ldr	r3, [pc, #308]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	049b      	lsls	r3, r3, #18
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11f      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e08b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4013      	ands	r3, r2
 8001d76:	d113      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e07f      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e074      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d92:	4b3e      	ldr	r3, [pc, #248]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2202      	movs	r2, #2
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e06d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001da0:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2207      	movs	r2, #7
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001db4:	f7fe fed2 	bl	8000b5c <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbc:	e009      	b.n	8001dd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbe:	f7fe fecd 	bl	8000b5c <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	4a2f      	ldr	r2, [pc, #188]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e054      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd2:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2238      	movs	r2, #56	; 0x38
 8001dd8:	401a      	ands	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d1ec      	bne.n	8001dbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2207      	movs	r2, #7
 8001dea:	4013      	ands	r3, r2
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d21e      	bcs.n	8001e30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b24      	ldr	r3, [pc, #144]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2207      	movs	r2, #7
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e04:	f7fe feaa 	bl	8000b5c <HAL_GetTick>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e0c:	e009      	b.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0e:	f7fe fea5 	bl	8000b5c <HAL_GetTick>
 8001e12:	0002      	movs	r2, r0
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4a1b      	ldr	r2, [pc, #108]	; (8001e88 <HAL_RCC_ClockConfig+0x1f4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e02c      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e22:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x1f0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4013      	ands	r3, r2
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e3a:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <HAL_RCC_ClockConfig+0x200>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	0019      	movs	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e4e:	f000 f829 	bl	8001ea4 <HAL_RCC_GetSysClockFreq>
 8001e52:	0001      	movs	r1, r0
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_ClockConfig+0x1f8>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCC_ClockConfig+0x204>)
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	58d3      	ldr	r3, [r2, r3]
 8001e64:	221f      	movs	r2, #31
 8001e66:	4013      	ands	r3, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	40da      	lsrs	r2, r3
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x208>)
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001e70:	4b0b      	ldr	r3, [pc, #44]	; (8001ea0 <HAL_RCC_ClockConfig+0x20c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7fe fe15 	bl	8000aa4 <HAL_InitTick>
 8001e7a:	0003      	movs	r3, r0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	00001388 	.word	0x00001388
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	fffff0ff 	.word	0xfffff0ff
 8001e94:	ffff8fff 	.word	0xffff8fff
 8001e98:	08002d88 	.word	0x08002d88
 8001e9c:	20000024 	.word	0x20000024
 8001ea0:	20000028 	.word	0x20000028

08001ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eaa:	4b3c      	ldr	r3, [pc, #240]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2238      	movs	r2, #56	; 0x38
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d10f      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	0adb      	lsrs	r3, r3, #11
 8001eba:	2207      	movs	r2, #7
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	0013      	movs	r3, r2
 8001ec4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ec6:	6839      	ldr	r1, [r7, #0]
 8001ec8:	4835      	ldr	r0, [pc, #212]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001eca:	f7fe f91b 	bl	8000104 <__udivsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	e05d      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2238      	movs	r2, #56	; 0x38
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	e054      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	; 0x38
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d138      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001ef2:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	2207      	movs	r2, #7
 8001f04:	4013      	ands	r3, r2
 8001f06:	3301      	adds	r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d10d      	bne.n	8001f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	4824      	ldr	r0, [pc, #144]	; (8001fa4 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f14:	f7fe f8f6 	bl	8000104 <__udivsi3>
 8001f18:	0003      	movs	r3, r0
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	227f      	movs	r2, #127	; 0x7f
 8001f24:	4013      	ands	r3, r2
 8001f26:	434b      	muls	r3, r1
 8001f28:	617b      	str	r3, [r7, #20]
        break;
 8001f2a:	e00d      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	481c      	ldr	r0, [pc, #112]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f30:	f7fe f8e8 	bl	8000104 <__udivsi3>
 8001f34:	0003      	movs	r3, r0
 8001f36:	0019      	movs	r1, r3
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	227f      	movs	r2, #127	; 0x7f
 8001f40:	4013      	ands	r3, r2
 8001f42:	434b      	muls	r3, r1
 8001f44:	617b      	str	r3, [r7, #20]
        break;
 8001f46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	0f5b      	lsrs	r3, r3, #29
 8001f4e:	2207      	movs	r2, #7
 8001f50:	4013      	ands	r3, r2
 8001f52:	3301      	adds	r3, #1
 8001f54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7fe f8d3 	bl	8000104 <__udivsi3>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e015      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2238      	movs	r2, #56	; 0x38
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2238      	movs	r2, #56	; 0x38
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b18      	cmp	r3, #24
 8001f82:	d103      	bne.n	8001f8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f84:	23fa      	movs	r3, #250	; 0xfa
 8001f86:	01db      	lsls	r3, r3, #7
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	e001      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f90:	693b      	ldr	r3, [r7, #16]
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b006      	add	sp, #24
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	00f42400 	.word	0x00f42400
 8001fa4:	007a1200 	.word	0x007a1200

08001fa8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0a8      	b.n	800210c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	2382      	movs	r3, #130	; 0x82
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d009      	beq.n	8001fe2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61da      	str	r2, [r3, #28]
 8001fd4:	e005      	b.n	8001fe2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	225d      	movs	r2, #93	; 0x5d
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	225c      	movs	r2, #92	; 0x5c
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7fe fc16 	bl	8000830 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	225d      	movs	r2, #93	; 0x5d
 8002008:	2102      	movs	r1, #2
 800200a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2140      	movs	r1, #64	; 0x40
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68da      	ldr	r2, [r3, #12]
 8002020:	23e0      	movs	r3, #224	; 0xe0
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	429a      	cmp	r2, r3
 8002026:	d902      	bls.n	800202e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e002      	b.n	8002034 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	23f0      	movs	r3, #240	; 0xf0
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	429a      	cmp	r2, r3
 800203e:	d008      	beq.n	8002052 <HAL_SPI_Init+0xaa>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	23e0      	movs	r3, #224	; 0xe0
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	429a      	cmp	r2, r3
 800204a:	d002      	beq.n	8002052 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	2382      	movs	r3, #130	; 0x82
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	2384      	movs	r3, #132	; 0x84
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	400b      	ands	r3, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	2102      	movs	r1, #2
 800206e:	400b      	ands	r3, r1
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	2101      	movs	r1, #1
 8002078:	400b      	ands	r3, r1
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6999      	ldr	r1, [r3, #24]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	400b      	ands	r3, r1
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	2138      	movs	r1, #56	; 0x38
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	400b      	ands	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	0011      	movs	r1, r2
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	019b      	lsls	r3, r3, #6
 80020a6:	401a      	ands	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	2204      	movs	r2, #4
 80020b8:	401a      	ands	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2110      	movs	r1, #16
 80020c0:	400b      	ands	r3, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c8:	2108      	movs	r1, #8
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68d9      	ldr	r1, [r3, #12]
 80020d2:	23f0      	movs	r3, #240	; 0xf0
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	400b      	ands	r3, r1
 80020d8:	431a      	orrs	r2, r3
 80020da:	0011      	movs	r1, r2
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	015b      	lsls	r3, r3, #5
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4907      	ldr	r1, [pc, #28]	; (8002114 <HAL_SPI_Init+0x16c>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	225d      	movs	r2, #93	; 0x5d
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	fffff7ff 	.word	0xfffff7ff

08002118 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002118:	b590      	push	{r4, r7, lr}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	001a      	movs	r2, r3
 8002126:	1cbb      	adds	r3, r7, #2
 8002128:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800212a:	2317      	movs	r3, #23
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	225c      	movs	r2, #92	; 0x5c
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_SPI_TransmitReceive_DMA+0x28>
 800213c:	2302      	movs	r3, #2
 800213e:	e186      	b.n	800244e <HAL_SPI_TransmitReceive_DMA+0x336>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	225c      	movs	r2, #92	; 0x5c
 8002144:	2101      	movs	r1, #1
 8002146:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002148:	2016      	movs	r0, #22
 800214a:	183b      	adds	r3, r7, r0
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	215d      	movs	r1, #93	; 0x5d
 8002150:	5c52      	ldrb	r2, [r2, r1]
 8002152:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800215a:	0001      	movs	r1, r0
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d011      	beq.n	8002188 <HAL_SPI_TransmitReceive_DMA+0x70>
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	2382      	movs	r3, #130	; 0x82
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	429a      	cmp	r2, r3
 800216c:	d107      	bne.n	800217e <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_SPI_TransmitReceive_DMA+0x66>
 8002176:	187b      	adds	r3, r7, r1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d004      	beq.n	8002188 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
    goto error;
 8002186:	e15b      	b.n	8002440 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_SPI_TransmitReceive_DMA+0x84>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_SPI_TransmitReceive_DMA+0x84>
 8002194:	1cbb      	adds	r3, r7, #2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 800219c:	2317      	movs	r3, #23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80021a4:	e14c      	b.n	8002440 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	225d      	movs	r2, #93	; 0x5d
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d003      	beq.n	80021ba <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	225d      	movs	r2, #93	; 0x5d
 80021b6:	2105      	movs	r1, #5
 80021b8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1cba      	adds	r2, r7, #2
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1cba      	adds	r2, r7, #2
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1cba      	adds	r2, r7, #2
 80021e0:	2144      	movs	r1, #68	; 0x44
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1cba      	adds	r2, r7, #2
 80021ea:	2146      	movs	r1, #70	; 0x46
 80021ec:	8812      	ldrh	r2, [r2, #0]
 80021ee:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4994      	ldr	r1, [pc, #592]	; (8002458 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8002208:	400a      	ands	r2, r1
 800220a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	23e0      	movs	r3, #224	; 0xe0
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	429a      	cmp	r2, r3
 8002216:	d908      	bls.n	800222a <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	498e      	ldr	r1, [pc, #568]	; (800245c <HAL_SPI_TransmitReceive_DMA+0x344>)
 8002224:	400a      	ands	r2, r1
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	e074      	b.n	8002314 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0149      	lsls	r1, r1, #5
 8002238:	430a      	orrs	r2, r1
 800223a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	429a      	cmp	r2, r3
 8002248:	d127      	bne.n	800229a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800224e:	001a      	movs	r2, r3
 8002250:	2301      	movs	r3, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d10f      	bne.n	8002276 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	497f      	ldr	r1, [pc, #508]	; (8002460 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8002262:	400a      	ands	r2, r1
 8002264:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002274:	e011      	b.n	800229a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	01c9      	lsls	r1, r1, #7
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228c:	b29b      	uxth	r3, r3
 800228e:	085b      	lsrs	r3, r3, #1
 8002290:	b29b      	uxth	r3, r3
 8002292:	3301      	adds	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	699a      	ldr	r2, [r3, #24]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d135      	bne.n	8002314 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685a      	ldr	r2, [r3, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	496a      	ldr	r1, [pc, #424]	; (800245c <HAL_SPI_TransmitReceive_DMA+0x344>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2246      	movs	r2, #70	; 0x46
 80022bc:	5a9b      	ldrh	r3, [r3, r2]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	001a      	movs	r2, r3
 80022c2:	2301      	movs	r3, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4964      	ldr	r1, [pc, #400]	; (8002464 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2246      	movs	r2, #70	; 0x46
 80022dc:	5a9b      	ldrh	r3, [r3, r2]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	085b      	lsrs	r3, r3, #1
 80022e2:	b299      	uxth	r1, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2246      	movs	r2, #70	; 0x46
 80022e8:	5299      	strh	r1, [r3, r2]
 80022ea:	e013      	b.n	8002314 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2180      	movs	r1, #128	; 0x80
 80022f8:	0189      	lsls	r1, r1, #6
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2246      	movs	r2, #70	; 0x46
 8002302:	5a9b      	ldrh	r3, [r3, r2]
 8002304:	b29b      	uxth	r3, r3
 8002306:	085b      	lsrs	r3, r3, #1
 8002308:	b29b      	uxth	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b299      	uxth	r1, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2246      	movs	r2, #70	; 0x46
 8002312:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	225d      	movs	r2, #93	; 0x5d
 8002318:	5c9b      	ldrb	r3, [r3, r2]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b04      	cmp	r3, #4
 800231e:	d108      	bne.n	8002332 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	4a50      	ldr	r2, [pc, #320]	; (8002468 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <HAL_SPI_TransmitReceive_DMA+0x354>)
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002330:	e007      	b.n	8002342 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <HAL_SPI_TransmitReceive_DMA+0x358>)
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	4a4d      	ldr	r2, [pc, #308]	; (8002474 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <HAL_SPI_TransmitReceive_DMA+0x360>)
 8002348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	2200      	movs	r2, #0
 8002350:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	0019      	movs	r1, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2246      	movs	r2, #70	; 0x46
 8002368:	5a9b      	ldrh	r3, [r3, r2]
 800236a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800236c:	0022      	movs	r2, r4
 800236e:	f7fe fd67 	bl	8000e40 <HAL_DMA_Start_IT>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d00e      	beq.n	8002394 <HAL_SPI_TransmitReceive_DMA+0x27c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	2210      	movs	r2, #16
 800237c:	431a      	orrs	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002382:	2317      	movs	r3, #23
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	225d      	movs	r2, #93	; 0x5d
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]
    goto error;
 8002392:	e055      	b.n	8002440 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2101      	movs	r1, #1
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a8:	2200      	movs	r2, #0
 80023aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	2200      	movs	r2, #0
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	2200      	movs	r2, #0
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2200      	movs	r2, #0
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	0019      	movs	r1, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023da:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023dc:	f7fe fd30 	bl	8000e40 <HAL_DMA_Start_IT>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d00e      	beq.n	8002402 <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e8:	2210      	movs	r2, #16
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80023f0:	2317      	movs	r3, #23
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	225d      	movs	r2, #93	; 0x5d
 80023fc:	2101      	movs	r1, #1
 80023fe:	5499      	strb	r1, [r3, r2]
    goto error;
 8002400:	e01e      	b.n	8002440 <HAL_SPI_TransmitReceive_DMA+0x328>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	4013      	ands	r3, r2
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d007      	beq.n	8002420 <HAL_SPI_TransmitReceive_DMA+0x308>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2140      	movs	r1, #64	; 0x40
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2120      	movs	r1, #32
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2102      	movs	r1, #2
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	225c      	movs	r2, #92	; 0x5c
 8002444:	2100      	movs	r1, #0
 8002446:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002448:	2317      	movs	r3, #23
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	781b      	ldrb	r3, [r3, #0]
}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b007      	add	sp, #28
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	ffff9fff 	.word	0xffff9fff
 800245c:	ffffefff 	.word	0xffffefff
 8002460:	ffffbfff 	.word	0xffffbfff
 8002464:	ffffdfff 	.word	0xffffdfff
 8002468:	080027c7 	.word	0x080027c7
 800246c:	08002681 	.word	0x08002681
 8002470:	080027e5 	.word	0x080027e5
 8002474:	08002731 	.word	0x08002731
 8002478:	08002803 	.word	0x08002803

0800247c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2240      	movs	r2, #64	; 0x40
 8002498:	4013      	ands	r3, r2
 800249a:	d10d      	bne.n	80024b8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2201      	movs	r2, #1
 80024a0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80024a2:	d009      	beq.n	80024b8 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	4013      	ands	r3, r2
 80024aa:	d005      	beq.n	80024b8 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	0010      	movs	r0, r2
 80024b4:	4798      	blx	r3
    return;
 80024b6:	e0c5      	b.n	8002644 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d009      	beq.n	80024d4 <HAL_SPI_IRQHandler+0x58>
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2280      	movs	r2, #128	; 0x80
 80024c4:	4013      	ands	r3, r2
 80024c6:	d005      	beq.n	80024d4 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	0010      	movs	r0, r2
 80024d0:	4798      	blx	r3
    return;
 80024d2:	e0b7      	b.n	8002644 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2220      	movs	r2, #32
 80024d8:	4013      	ands	r3, r2
 80024da:	d109      	bne.n	80024f0 <HAL_SPI_IRQHandler+0x74>
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	2240      	movs	r2, #64	; 0x40
 80024e0:	4013      	ands	r3, r2
 80024e2:	d105      	bne.n	80024f0 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d100      	bne.n	80024f0 <HAL_SPI_IRQHandler+0x74>
 80024ee:	e0a9      	b.n	8002644 <HAL_SPI_IRQHandler+0x1c8>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2220      	movs	r2, #32
 80024f4:	4013      	ands	r3, r2
 80024f6:	d100      	bne.n	80024fa <HAL_SPI_IRQHandler+0x7e>
 80024f8:	e0a4      	b.n	8002644 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	4013      	ands	r3, r2
 8002500:	d023      	beq.n	800254a <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	225d      	movs	r2, #93	; 0x5d
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b03      	cmp	r3, #3
 800250c:	d011      	beq.n	8002532 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	2204      	movs	r2, #4
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800251a:	2300      	movs	r3, #0
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	e00b      	b.n	800254a <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	613b      	str	r3, [r7, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	693b      	ldr	r3, [r7, #16]
        return;
 8002548:	e07c      	b.n	8002644 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2220      	movs	r2, #32
 800254e:	4013      	ands	r3, r2
 8002550:	d014      	beq.n	800257c <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	2201      	movs	r2, #1
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	438a      	bics	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	4013      	ands	r3, r2
 8002584:	d00c      	beq.n	80025a0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	2208      	movs	r2, #8
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60bb      	str	r3, [r7, #8]
 800259e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d04c      	beq.n	8002642 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	21e0      	movs	r1, #224	; 0xe0
 80025b4:	438a      	bics	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	225d      	movs	r2, #93	; 0x5d
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2202      	movs	r2, #2
 80025c4:	4013      	ands	r3, r2
 80025c6:	d103      	bne.n	80025d0 <HAL_SPI_IRQHandler+0x154>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4013      	ands	r3, r2
 80025ce:	d032      	beq.n	8002636 <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2103      	movs	r1, #3
 80025dc:	438a      	bics	r2, r1
 80025de:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d010      	beq.n	800260a <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_SPI_IRQHandler+0x1d0>)
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f4:	0018      	movs	r0, r3
 80025f6:	f7fe fca9 	bl	8000f4c <HAL_DMA_Abort_IT>
 80025fa:	1e03      	subs	r3, r0, #0
 80025fc:	d005      	beq.n	800260a <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_SPI_IRQHandler+0x1d0>)
 8002618:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	0018      	movs	r0, r3
 8002620:	f7fe fc94 	bl	8000f4c <HAL_DMA_Abort_IT>
 8002624:	1e03      	subs	r3, r0, #0
 8002626:	d00b      	beq.n	8002640 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	2240      	movs	r2, #64	; 0x40
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002634:	e004      	b.n	8002640 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe f8bb 	bl	80007b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800263e:	e000      	b.n	8002642 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8002640:	46c0      	nop			; (mov r8, r8)
    return;
 8002642:	46c0      	nop			; (mov r8, r8)
  }
}
 8002644:	46bd      	mov	sp, r7
 8002646:	b008      	add	sp, #32
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	08002845 	.word	0x08002845

08002650 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800268e:	f7fe fa65 	bl	8000b5c <HAL_GetTick>
 8002692:	0003      	movs	r3, r0
 8002694:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	4013      	ands	r3, r2
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d03e      	beq.n	8002722 <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2120      	movs	r1, #32
 80026b0:	438a      	bics	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10e      	bne.n	80026da <SPI_DMAReceiveCplt+0x5a>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	2382      	movs	r3, #130	; 0x82
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d108      	bne.n	80026da <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2103      	movs	r1, #3
 80026d4:	438a      	bics	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
 80026d8:	e007      	b.n	80026ea <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	438a      	bics	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 f9ed 	bl	8002ad0 <SPI_EndRxTransaction>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d002      	beq.n	8002700 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2246      	movs	r2, #70	; 0x46
 8002704:	2100      	movs	r1, #0
 8002706:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	225d      	movs	r2, #93	; 0x5d
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002714:	2b00      	cmp	r3, #0
 8002716:	d004      	beq.n	8002722 <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	0018      	movs	r0, r3
 800271c:	f7fe f84a 	bl	80007b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002720:	e003      	b.n	800272a <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	0018      	movs	r0, r3
 8002726:	f7ff ff93 	bl	8002650 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800272a:	46bd      	mov	sp, r7
 800272c:	b004      	add	sp, #16
 800272e:	bd80      	pop	{r7, pc}

08002730 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800273e:	f7fe fa0d 	bl	8000b5c <HAL_GetTick>
 8002742:	0003      	movs	r3, r0
 8002744:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2220      	movs	r2, #32
 800274e:	4013      	ands	r3, r2
 8002750:	2b20      	cmp	r3, #32
 8002752:	d031      	beq.n	80027b8 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2120      	movs	r1, #32
 8002760:	438a      	bics	r2, r1
 8002762:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002764:	68ba      	ldr	r2, [r7, #8]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2164      	movs	r1, #100	; 0x64
 800276a:	0018      	movs	r0, r3
 800276c:	f000 fa0e 	bl	8002b8c <SPI_EndRxTxTransaction>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d005      	beq.n	8002780 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002778:	2220      	movs	r2, #32
 800277a:	431a      	orrs	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2103      	movs	r1, #3
 800278c:	438a      	bics	r2, r1
 800278e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2246      	movs	r2, #70	; 0x46
 800279a:	2100      	movs	r1, #0
 800279c:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	225d      	movs	r2, #93	; 0x5d
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fd ffff 	bl	80007b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027b6:	e003      	b.n	80027c0 <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fd ffe6 	bl	800078c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d2:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7ff ff42 	bl	8002660 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b004      	add	sp, #16
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff ff3b 	bl	8002670 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b004      	add	sp, #16
 8002800:	bd80      	pop	{r7, pc}

08002802 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2103      	movs	r1, #3
 800281c:	438a      	bics	r2, r1
 800281e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	2210      	movs	r2, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	225d      	movs	r2, #93	; 0x5d
 8002830:	2101      	movs	r1, #1
 8002832:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	0018      	movs	r0, r3
 8002838:	f7fd ffbc 	bl	80007b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b004      	add	sp, #16
 8002842:	bd80      	pop	{r7, pc}

08002844 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2246      	movs	r2, #70	; 0x46
 8002856:	2100      	movs	r1, #0
 8002858:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	0018      	movs	r0, r3
 8002864:	f7fd ffa6 	bl	80007b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	b004      	add	sp, #16
 800286e:	bd80      	pop	{r7, pc}

08002870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	1dfb      	adds	r3, r7, #7
 800287e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002880:	f7fe f96c 	bl	8000b5c <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002888:	1a9b      	subs	r3, r3, r2
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	18d3      	adds	r3, r2, r3
 800288e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002890:	f7fe f964 	bl	8000b5c <HAL_GetTick>
 8002894:	0003      	movs	r3, r0
 8002896:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002898:	4b3a      	ldr	r3, [pc, #232]	; (8002984 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	0d1b      	lsrs	r3, r3, #20
 80028a0:	69fa      	ldr	r2, [r7, #28]
 80028a2:	4353      	muls	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a6:	e058      	b.n	800295a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	d055      	beq.n	800295a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028ae:	f7fe f955 	bl	8000b5c <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d902      	bls.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d142      	bne.n	800294a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	21e0      	movs	r1, #224	; 0xe0
 80028d0:	438a      	bics	r2, r1
 80028d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	2382      	movs	r3, #130	; 0x82
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	429a      	cmp	r2, r3
 80028de:	d113      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x98>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d005      	beq.n	80028f8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d107      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2140      	movs	r1, #64	; 0x40
 8002904:	438a      	bics	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	019b      	lsls	r3, r3, #6
 8002910:	429a      	cmp	r2, r3
 8002912:	d110      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	491a      	ldr	r1, [pc, #104]	; (8002988 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002920:	400a      	ands	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2180      	movs	r1, #128	; 0x80
 8002930:	0189      	lsls	r1, r1, #6
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	225d      	movs	r2, #93	; 0x5d
 800293a:	2101      	movs	r1, #1
 800293c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	225c      	movs	r2, #92	; 0x5c
 8002942:	2100      	movs	r1, #0
 8002944:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e017      	b.n	800297a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3b01      	subs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4013      	ands	r3, r2
 8002964:	68ba      	ldr	r2, [r7, #8]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	425a      	negs	r2, r3
 800296a:	4153      	adcs	r3, r2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	001a      	movs	r2, r3
 8002970:	1dfb      	adds	r3, r7, #7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d197      	bne.n	80028a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b008      	add	sp, #32
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	20000024 	.word	0x20000024
 8002988:	ffffdfff 	.word	0xffffdfff

0800298c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	; 0x28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800299a:	2317      	movs	r3, #23
 800299c:	18fb      	adds	r3, r7, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029a2:	f7fe f8db 	bl	8000b5c <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	1a9b      	subs	r3, r3, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	18d3      	adds	r3, r2, r3
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80029b2:	f7fe f8d3 	bl	8000b5c <HAL_GetTick>
 80029b6:	0003      	movs	r3, r0
 80029b8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	330c      	adds	r3, #12
 80029c0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029c2:	4b41      	ldr	r3, [pc, #260]	; (8002ac8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	0013      	movs	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	00da      	lsls	r2, r3, #3
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	0d1b      	lsrs	r3, r3, #20
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	4353      	muls	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029d8:	e068      	b.n	8002aac <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	23c0      	movs	r3, #192	; 0xc0
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d10a      	bne.n	80029fa <SPI_WaitFifoStateUntilTimeout+0x6e>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d107      	bne.n	80029fa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	2117      	movs	r1, #23
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029f6:	187b      	adds	r3, r7, r1
 80029f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	d055      	beq.n	8002aac <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a00:	f7fe f8ac 	bl	8000b5c <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d902      	bls.n	8002a16 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d142      	bne.n	8002a9c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	21e0      	movs	r1, #224	; 0xe0
 8002a22:	438a      	bics	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	2382      	movs	r3, #130	; 0x82
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d113      	bne.n	8002a5a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d005      	beq.n	8002a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	2380      	movs	r3, #128	; 0x80
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d107      	bne.n	8002a5a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2140      	movs	r1, #64	; 0x40
 8002a56:	438a      	bics	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a5e:	2380      	movs	r3, #128	; 0x80
 8002a60:	019b      	lsls	r3, r3, #6
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d110      	bne.n	8002a88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4916      	ldr	r1, [pc, #88]	; (8002acc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0189      	lsls	r1, r1, #6
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	225d      	movs	r2, #93	; 0x5d
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	225c      	movs	r2, #92	; 0x5c
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e010      	b.n	8002abe <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d18e      	bne.n	80029da <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	0018      	movs	r0, r3
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b00a      	add	sp, #40	; 0x28
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	20000024 	.word	0x20000024
 8002acc:	ffffdfff 	.word	0xffffdfff

08002ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	2382      	movs	r3, #130	; 0x82
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d113      	bne.n	8002b10 <SPI_EndRxTransaction+0x40>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d005      	beq.n	8002b00 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d107      	bne.n	8002b10 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2140      	movs	r1, #64	; 0x40
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	0013      	movs	r3, r2
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2180      	movs	r1, #128	; 0x80
 8002b1e:	f7ff fea7 	bl	8002870 <SPI_WaitFlagStateUntilTimeout>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d007      	beq.n	8002b36 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e026      	b.n	8002b84 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	2382      	movs	r3, #130	; 0x82
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d11f      	bne.n	8002b82 <SPI_EndRxTransaction+0xb2>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d005      	beq.n	8002b5a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d113      	bne.n	8002b82 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	23c0      	movs	r3, #192	; 0xc0
 8002b5e:	00d9      	lsls	r1, r3, #3
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	0013      	movs	r3, r2
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f7ff ff0f 	bl	800298c <SPI_WaitFifoStateUntilTimeout>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d007      	beq.n	8002b82 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	2220      	movs	r2, #32
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e000      	b.n	8002b84 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	0018      	movs	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	23c0      	movs	r3, #192	; 0xc0
 8002b9c:	0159      	lsls	r1, r3, #5
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	0013      	movs	r3, r2
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f7ff fef0 	bl	800298c <SPI_WaitFifoStateUntilTimeout>
 8002bac:	1e03      	subs	r3, r0, #0
 8002bae:	d007      	beq.n	8002bc0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e027      	b.n	8002c10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	0013      	movs	r3, r2
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	f7ff fe4f 	bl	8002870 <SPI_WaitFlagStateUntilTimeout>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d007      	beq.n	8002be6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bda:	2220      	movs	r2, #32
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e014      	b.n	8002c10 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	23c0      	movs	r3, #192	; 0xc0
 8002bea:	00d9      	lsls	r1, r3, #3
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	0013      	movs	r3, r2
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f7ff fec9 	bl	800298c <SPI_WaitFifoStateUntilTimeout>
 8002bfa:	1e03      	subs	r3, r0, #0
 8002bfc:	d007      	beq.n	8002c0e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c02:	2220      	movs	r2, #32
 8002c04:	431a      	orrs	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e000      	b.n	8002c10 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b004      	add	sp, #16
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <memset>:
 8002c18:	0003      	movs	r3, r0
 8002c1a:	1882      	adds	r2, r0, r2
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d100      	bne.n	8002c22 <memset+0xa>
 8002c20:	4770      	bx	lr
 8002c22:	7019      	strb	r1, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	e7f9      	b.n	8002c1c <memset+0x4>

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	2600      	movs	r6, #0
 8002c2c:	4c0c      	ldr	r4, [pc, #48]	; (8002c60 <__libc_init_array+0x38>)
 8002c2e:	4d0d      	ldr	r5, [pc, #52]	; (8002c64 <__libc_init_array+0x3c>)
 8002c30:	1b64      	subs	r4, r4, r5
 8002c32:	10a4      	asrs	r4, r4, #2
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	f000 f819 	bl	8002c70 <_init>
 8002c3e:	4c0a      	ldr	r4, [pc, #40]	; (8002c68 <__libc_init_array+0x40>)
 8002c40:	4d0a      	ldr	r5, [pc, #40]	; (8002c6c <__libc_init_array+0x44>)
 8002c42:	1b64      	subs	r4, r4, r5
 8002c44:	10a4      	asrs	r4, r4, #2
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	00b3      	lsls	r3, r6, #2
 8002c4e:	58eb      	ldr	r3, [r5, r3]
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	00b3      	lsls	r3, r6, #2
 8002c58:	58eb      	ldr	r3, [r5, r3]
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08002dc8 	.word	0x08002dc8
 8002c64:	08002dc8 	.word	0x08002dc8
 8002c68:	08002dcc 	.word	0x08002dcc
 8002c6c:	08002dc8 	.word	0x08002dc8

08002c70 <_init>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c76:	bc08      	pop	{r3}
 8002c78:	469e      	mov	lr, r3
 8002c7a:	4770      	bx	lr

08002c7c <_fini>:
 8002c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c82:	bc08      	pop	{r3}
 8002c84:	469e      	mov	lr, r3
 8002c86:	4770      	bx	lr
